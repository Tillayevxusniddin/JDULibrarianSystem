generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMLAR ---
enum Role {
  LIBRARIAN
  USER
  MANAGER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// YANGI ENUM: Har bir kitob nusxasining holati uchun
enum BookCopyStatus {
  AVAILABLE // Kutubxonada mavjud
  BORROWED // Ijaraga berilgan
  MAINTENANCE // Ta'mirda
  LOST // Yo'qolgan
}

enum LoanStatus {
  ACTIVE
  RETURNED
  OVERDUE
  PENDING_RETURN
}

enum NotificationType {
  INFO
  WARNING
  FINE
  RESERVATION_AVAILABLE
}

enum SuggestionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ReservationStatus {
  ACTIVE // Navbatda
  AWAITING_PICKUP // Olib ketish kutilmoqda
  FULFILLED // Bajarilgan (olib ketildi)
  EXPIRED // Muddati o'tgan (olib ketilmadi)
  CANCELLED // Bekor qilingan
}

// --- MODELLAR ---

model User {
  id             String     @id @default(uuid())
  firstName      String
  lastName       String
  email          String     @unique
  password       String
  role           Role       @default(USER)
  status         UserStatus @default(ACTIVE)
  profilePicture String?
  isPremium      Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Blog tizimi (o'zgarishsiz)
  channel          Channel?       @relation("ChannelOwner")
  posts            Post[]
  comments         PostComment[]
  reactions        PostReaction[]
  followedChannels Follow[]

  // Kutubxona tizimi
  loans         Loan[]
  reservations  Reservation[]
  bookComments  BookComment[]    @relation("UserBookComments")
  suggestions   BookSuggestion[]
  notifications Notification[]
  fines         Fine[]

  @@map("users")
}

// --- BLOG TIZIMI MODELLARI (o'zgarishsiz qoladi) ---
model Channel {
  id        String   @id @default(uuid())
  name      String
  linkName  String   @unique
  bio       String?  @db.Text
  logoImage String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   String   @unique
  owner     User     @relation("ChannelOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  posts     Post[]
  followers Follow[]

  @@map("channels")
}

model Post {
  id        String         @id @default(uuid())
  content   String         @db.Text
  postImage String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  channelId String
  channel   Channel        @relation(fields: [channelId], references: [id], onDelete: Cascade)
  authorId  String
  author    User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  PostComment[]
  reactions PostReaction[]

  @@map("posts")
}

model PostComment {
  id        String        @id @default(uuid())
  content   String        @db.Text
  createdAt DateTime      @default(now())
  postId    String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    PostComment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   PostComment[] @relation("Replies")

  @@map("post_comments")
}

model PostReaction {
  id        String   @id @default(uuid())
  emoji     String
  createdAt DateTime @default(now())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_reactions")
}

model Follow {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
  @@map("follows")
}

// --- KUTUBXONA TIZIMI MODELLARI (KATTA O'ZGARISHLAR BILAN) ---

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  books       Book[]

  @@map("categories")
}

// Book modeli endi "Kitob Pasporti" vazifasini bajaradi
model Book {
  id            String   @id @default(uuid())
  title         String
  author        String?
  description   String?  @db.Text
  publisher     String?
  publishedYear Int?
  pageCount     Int?
  coverImage    String?
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Bog'lanishlar
  copies       BookCopy[] // Bu kitobning barcha jismoniy nusxalari
  comments     BookComment[]
  reservations Reservation[]

  @@index([title, author])
  @@map("books")
}

// YANGI MODEL: Har bir jismoniy kitob nusxasi uchun
model BookCopy {
  id      String         @id @default(uuid())
  barcode String         @unique // Har bir nusxaning unikal shtrix-kodi yoki inventar raqami
  status  BookCopyStatus @default(AVAILABLE)

  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  // Bog'lanishlar
  loan Loan? // Bu nusxa faqat bitta aktiv ijarada bo'lishi mumkin

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("book_copies")
}

// Loan modeli endi to'g'ridan-to'g'ri BookCopy'ga bog'lanadi
model Loan {
  id               String     @id @default(uuid())
  borrowedAt       DateTime   @default(now())
  dueDate          DateTime
  returnedAt       DateTime?
  status           LoanStatus @default(ACTIVE)
  renewalRequested Boolean    @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  bookCopyId String   @unique // Qaysi aniq nusxa ijaraga olingani
  bookCopy   BookCopy @relation(fields: [bookCopyId], references: [id])

  fine Fine?

  @@map("loans")
}

// Reservation modeli asosan Book'ga bog'lanadi, lekin nusxa tayinlanishi ham mumkin
model Reservation {
  id         String            @id @default(uuid())
  reservedAt DateTime          @default(now())
  expiresAt  DateTime? // Qachongacha olib ketishi kerakligi
  status     ReservationStatus @default(ACTIVE)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  bookId String // Qaysi kitob nomi band qilingani
  book   Book   @relation(fields: [bookId], references: [id])

  // Foydalanuvchi olib ketishi uchun tayinlangan aniq nusxa (ixtiyoriy)
  assignedCopyId String?

  @@unique([bookId, userId, status], name: "active_user_book_reservation")
  @@map("reservations")
}

model Fine {
  id        String    @id @default(uuid())
  amount    Decimal   @db.Decimal(10, 2)
  reason    String
  isPaid    Boolean   @default(false)
  paidAt    DateTime?
  loanId    String?   @unique
  loan      Loan?     @relation(fields: [loanId], references: [id])
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("fines")
}

model BookComment {
  id        String   @id @default(uuid())
  comment   String   @db.Text
  rating    Int?
  createdAt DateTime @default(now())
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation("UserBookComments", fields: [userId], references: [id])

  @@map("book_comments")
}

model BookSuggestion {
  id        String           @id @default(uuid())
  title     String
  author    String?
  note      String?
  status    SuggestionStatus @default(PENDING)
  createdAt DateTime         @default(now())
  userId    String
  user      User             @relation(fields: [userId], references: [id])

  @@map("book_suggestions")
}

model Notification {
  id        String           @id @default(uuid())
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  link      String?

  @@map("notifications")
}
