name: CI/CD - Library System

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  # ======================================================
  # === 1. CI BOSQICHI: PR OCHILGANDA TEKSHIRUVLAR ===
  # ======================================================
  test-and-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Kodni yuklab olish
        uses: actions/checkout@v3

      - name: Node.js'ni sozlash
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Qaramliklarni o'rnatish
        run: npm ci

      - name: Buildni tekshirish
        run: npm run build

      - name: Linter yoki testlarni ishga tushirish
        run: |
          echo "Bu yerda npm run lint yoki npm test yozasiz (agar mavjud bo'lsa)"
          echo "✅ Build muvaffaqiyatli bo'ldi."

  # ======================================================
  # === 2. DEPLOYMENT: MAIN GA MERGE BO‘LGANDA ===
  # ======================================================
  deploy-frontend:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: test-and-build
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Kodni yuklab olish
        uses: actions/checkout@v3

      - name: Node.js'ni sozlash
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Qaramliklarni o'rnatish
        run: npm ci

      - name: Qurish
        run: npm run build

      - name: AWS hisob ma'lumotlarini sozlash
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: S3'ga deploy qilish
        run: aws s3 sync ./dist/ s3://${{ secrets.S3_BUCKET_NAME }}/ --delete

      - name: CloudFront keshini tozalash
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  deploy-backend:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: deploy-frontend

    steps:
      - name: Kodni yuklab olish
        uses: actions/checkout@v3

      - name: SSH kalitini sozlash
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: .env faylini yaratish
        run: echo "${{ secrets.ENV_FILE_PRODUCTION }}" > ./backend/.env

      - name: Fayllarni EC2'ga rsync orqali deploy qilish
        run: |
          rsync -avz --delete --exclude 'node_modules' --exclude 'dist' --exclude '.git' \
          -e "ssh -o StrictHostKeyChecking=no" \
          ./backend/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/backend/

      - name: EC2'da masofaviy buyruqlarni bajarish
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/backend
            echo "Backend xizmatlari qayta ishga tushirilmoqda..."
            sudo docker-compose -f docker-compose.prod.yml up -d --build --force-recreate
            echo "Eski Docker image'lar tozalanmoqda..."
            sudo docker image prune -a -f
